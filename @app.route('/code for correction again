import spidev
import time
import json
import requests
import RPi.GPIO as GPIO
from flask import Flask, request, jsonify
import socket
import mysql.connector
from mysql.connector import pooling

# Flask setup
app = Flask(__name__)
hostname = socket.gethostname()

# SPI and GPIO Configuration
spi = spidev.SpiDev()
spi.open(0, 0)  # Use SPI bus 0
spi.max_speed_hz = 1000000  # 1 MHz

# MCP23S17 Register Definitions
IODIRA = 0x00  # GPIOA as inputs (buttons)
IODIRB = 0x01  # GPIOB as outputs (LEDs)
GPIOA = 0x12   # GPIOA register for reading buttons
OLATB = 0x15   # Output latch for GPIOB (LEDs)

# MCP23S17 Expander Addresses
mcp23s17_addresses = [0x40, 0x42, 0x44, 0x46]

# Chip Select (CS) GPIO Pins
cs_pins = [5, 6, 25, 26]  # CS pins for each MCP23S17 chip

# Database Configuration
db_config = {
    'host': '10.110.10.204',
    'user': 'root',
    'password': 'Passw0rd123',
    'database': 'PickByLight'
}

# MySQL Connection Pool
mysql_pool = pooling.MySQLConnectionPool(pool_name="mysql_pool", pool_size=5, **db_config)

# GPIO Setup for CS Pins
GPIO.setmode(GPIO.BCM)
for pin in cs_pins:
    GPIO.setup(pin, GPIO.OUT)
    GPIO.output(pin, GPIO.HIGH)  # Set all CS pins HIGH (inactive)

# Helper Functions for SPI Communication
def select_expander(expander):
    """Activate the correct expander's CS pin."""
    for i, pin in enumerate(cs_pins):
        GPIO.output(pin, GPIO.LOW if i == expander else GPIO.HIGH)

def deselect_chip(expander):
    """Deselect the current chip."""
    GPIO.output(cs_pins[expander], GPIO.HIGH)

def write_register(expander, register, value):
    """Write data to an MCP23S17 register."""
    select_expander(expander)
    spi.xfer2([mcp23s17_addresses[expander], register, value])
    deselect_chip(expander)

def read_register(expander, register):
    """Read data from an MCP23S17 register."""
    select_expander(expander)
    result = spi.xfer2([mcp23s17_addresses[expander] + 1, register, 0x00])
    deselect_chip(expander)
    return result[2]

# GPIO Initialization
def setup_mcp23s17(expander):
    """Set GPIOA as inputs and GPIOB as outputs."""
    write_register(expander, IODIRA, 0xFF)  # GPIOA as inputs (buttons)
    write_register(expander, IODIRB, 0x00)  # GPIOB as outputs (LEDs)

def initialize_gpio(config):
    """Initialize MCP23S17 chips."""
    for expander in range(len(cs_pins)):
        setup_mcp23s17(expander)

    # Ensure all LEDs are off initially
    for material, led_config in config['led_pins'].items():
        chip = led_config['chip']
        pin = led_config['pin']
        deactivate_led_for_material(chip, pin)

def activate_led_for_material(chip, led_pin):
    """Turn on the LED for the given material."""
    current_output = read_register(chip, OLATB)
    new_output = current_output & ~(1 << led_pin)  # Active low to turn on
    write_register(chip, OLATB, new_output)

def deactivate_led_for_material(chip, led_pin):
    """Turn off the LED for the given material."""
    current_output = read_register(chip, OLATB)
    new_output = current_output | (1 << led_pin)  # Active high to turn off
    write_register(chip, OLATB, new_output)

def verify_leds():
    """Verify LEDs by turning them all on briefly."""
    print("Verifying all LEDs...")
    for material, led_config in led_pins.items():
        chip = led_config['chip']
        pin = led_config['pin']
        activate_led_for_material(chip, pin)

    time.sleep(2)

    for material, led_config in led_pins.items():
        chip = led_config['chip']
        pin = led_config['pin']
        deactivate_led_for_material(chip, pin)

    print("LED verification completed.")

# Flask Routes
@app.route('/activate_led', methods=['POST'])
def activate_led():
    data = request.json
    materials = data.get('materials', [])
    machine_name = data.get('machine_name', '')

    if not materials or not machine_name:
        return jsonify({'error': 'No materials or machine_name provided'}), 400

    for material in materials:
        if material in led_pins:
            chip = led_pins[material]['chip']
            led_pin = led_pins[material]['pin']
            button_pin = button_pins[material]['pin']

            # Activate LED
            activate_led_for_material(chip, led_pin)
            print(f"LED for {material} is ON")

            # Wait for button press confirmation
            while True:
                button_state = read_register(chip, GPIOA)
                if not (button_state & (1 << button_pin)):  # Button pressed (active low)
                    deactivate_led_for_material(chip, led_pin)  # Turn off the LED
                    print(f"Material {material} confirmed")

                    # Send confirmation
                    try:
                        response = requests.post(
                            'http://10.110.10.204:5001/confirmation_material',
                            json={'material': material, 'hostname': hostname, 'machine_name': machine_name}
                        )
                        response.raise_for_status()
                    except requests.RequestException as e:
                        print(f"Error sending confirmation for {material}: {e}")
                    break
                time.sleep(0.1)  # Debounce

    return jsonify({'status': f'All materials processed for machine {machine_name}'}), 200

@app.route('/deactivate_led', methods=['POST'])
def deactivate_led():
    data = request.json
    material = data.get('material')

    if material in led_pins:
        chip = led_pins[material]['chip']
        led_pin = led_pins[material]['pin']
        deactivate_led_for_material(chip, led_pin)
        print(f"LED for {material} is OFF")
        return jsonify({'status': 'LED deactivated'}), 200

    return jsonify({'error': 'Invalid material'}), 400

# Utility Functions
def get_ip_address():
    """Retrieve the Raspberry Pi's IP address."""
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
    except Exception:
        ip = "127.0.0.1"
    finally:
        s.close()
    return ip

def fetch_configuration():
    """Fetch configuration from the database."""
    ip_address = get_ip_address()
    connection = mysql_pool.get_connection()
    try:
        cursor = connection.cursor(dictionary=True)
        cursor.execute('SELECT * FROM rasp_pi_configurations WHERE ip_address = %s', (ip_address,))
        config = cursor.fetchone()
        if config:
            config['led_pins'] = json.loads(config['led_pins'])
            config['button_pins'] = json.loads(config['button_pins'])
        return config or {}
    finally:
        cursor.close()
        connection.close()

def main():
    """Main entry point."""
    config = fetch_configuration()
    if not config:
        print("No configuration found for this Raspberry Pi.")
        return

    global led_pins, button_pins
    led_pins = config['led_pins']
    button_pins = config['button_pins']

    initialize_gpio(config)
    verify_leds()

    try:
        app.run(host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        print("\nExiting...")
    finally:
        GPIO.cleanup()

if __name__ == '__main__':
    main()
