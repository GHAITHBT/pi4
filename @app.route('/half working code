from flask import Flask, request, jsonify
import RPi.GPIO as GPIO
import socket
import requests
import time
import threading
import mysql.connector
from mysql.connector import pooling
import json
import subprocess
import spidev  # SPI for MCP23S17

app = Flask(__name__)

hostname = socket.gethostname()

# Database configuration
db_config = {
    'host': '10.110.10.204',
    'user': 'root',
    'password': 'Passw0rd123',
    'database': 'PickByLight'
}

# Set up database connection pool
mysql_pool = pooling.MySQLConnectionPool(
    pool_name="mysql_pool",
    pool_size=5,
    **db_config
)

def get_db_connection():
    return mysql_pool.get_connection()

# Get the IP address of the Raspberry Pi
def get_ip_address():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
    except Exception:
        ip = "127.0.0.1"
    finally:
        s.close()
    return ip

# SPI setup for MCP23S17 (up to 4 devices)
spi = spidev.SpiDev()
mcp_cs_pins = [0, 1, 2, 3]  # CS pins for each MCP23S17 device
mcp_devices = [spi] * 4  # Represent 4 MCP devices

# Open SPI devices and configure them
for cs in mcp_cs_pins:
    spi.open(0, 0)
    spi.max_speed_hz = 1000000  # 1 MHz speed for MCP23S17

# MCP23S17 Register addresses
IODIRA = 0x00  # I/O direction for Bank A
IODIRB = 0x01  # I/O direction for Bank B
GPPUA = 0x0C   # Pull-up resistors for Bank A
GPIOA = 0x12   # GPIO register for Bank A (buttons)
GPIOB = 0x13   # GPIO register for Bank B (LEDs)

# Helper functions to write and read from MCP23S17
def write_register(chip, register, value):
    spi.xfer2([0x40, register, value], chip)  # Write operation

def read_register(chip, register):
    return spi.xfer2([0x41, register, 0x00], chip)[2]  # Read operation

# GPIO Pins (Loaded from the DB config later)
led_pins = {}
button_pins = {}
led_status = {}

# Initialize MCP23S17 GPIO
def initialize_gpio(config):
    global led_pins, button_pins

    # Set direction of each LED pin (output) and Button pin (input)
    for material, info in config['led_pins'].items():
        write_register(info['chip'], IODIRB, 0x00)  # Set as output for LED
        write_register(info['chip'], GPIOB, 0xFF)  # Start with all LEDs on (active high)

    for material, info in config['button_pins'].items():
        write_register(info['chip'], IODIRA, 0xFF)  # Set as input for buttons
        write_register(info['chip'], GPPUA, 0xFF)  # Enable pull-up resistor

    led_pins = config['led_pins']
    button_pins = config['button_pins']

# Fetch configuration from the database
def fetch_configuration():
    ip_address = get_ip_address()
    connection = get_db_connection()
    try:
        cursor = connection.cursor(dictionary=True)
        cursor.execute('SELECT * FROM rasp_pi_configurations WHERE ip_address = %s', (ip_address,))
        config = cursor.fetchone()
        if config:
            config['led_pins'] = json.loads(config['led_pins'])
            config['button_pins'] = json.loads(config['button_pins'])
            return config
        return {}
    except mysql.connector.Error as err:
        print(f"Database error: {err}")
        return {}
    finally:
        cursor.close()
        connection.close()

# Activate the LEDs for materials one by one, waiting for button press confirmation
@app.route('/activate_led', methods=['POST'])
def activate_led():
    data = request.json
    materials = data.get('materials', [])
    machine_name = data.get('machine_name', '')

    if not materials or not machine_name:
        return jsonify({'error': 'No materials or machine_name provided'}), 400

    for material in materials:
        if material in led_pins:
            chip = led_pins[material]['chip']
            led_pin = led_pins[material]['pin']
            button_pin = button_pins[material]['pin']

            # Turn on the LED initially
            write_register(chip, GPIOB, 0xFF)  # Turn on LED for the material
            led_status[material] = True

            # Wait for button press
            while True:
                button_state = read_register(chip, GPIOA)
                if button_state & (1 << button_pin) == 0:  # Button pressed (active low)
                    write_register(chip, GPIOB, 0x00)  # Turn off the LED after confirmation
                    led_status[material] = False
                    print(f"Material {material} confirmed for machine {machine_name}")
                    # Send confirmation back to the server
                    try:
                        response = requests.post(f'http://10.110.10.204:5001/confirmation_material', 
                                                 json={'material': material, 'hostname': hostname, 'machine_name': machine_name})
                        response.raise_for_status()
                    except requests.RequestException as e:
                        print(f"Error sending confirmation for {material}: {e}")
                    break
                time.sleep(0.1)  # Debounce

    return jsonify({'status': f'All materials processed for machine {machine_name}'}), 200

# Deactivate the specified LED
@app.route('/deactivate_led', methods=['POST'])
def deactivate_led():
    data = request.json
    material = data.get('material')
    if material in led_pins:
        chip = led_pins[material]['chip']
        write_register(chip, GPIOB, 0x00)  # Turn off the LED
        led_status[material] = False
        return jsonify({'status': 'LED deactivated'}), 200
    return jsonify({'error': 'Invalid material'}), 400

# Verify LEDs by blinking each one briefly
def verify_leds():
    print("Verifying LEDs...")
    for material, info in led_pins.items():
        chip = info['chip']
        pin = info['pin']
        write_register(chip, GPIOB, 0xFF)  # Turn on the LED
        time.sleep(1)
        write_register(chip, GPIOB, 0x00)  # Turn off the LED
        time.sleep(0.2)

# Main function to manage GPIO and configuration
def main():
    config = fetch_configuration()
    if not config:
        print("No configuration found for this Raspberry Pi.")
        return

    global led_pins, button_pins
    led_pins = config.get('led_pins', {})
    button_pins = config.get('button_pins', {})

    initialize_gpio(config)

    try:
        # Verify LEDs are functioning correctly
        verify_leds()

        # Run Flask server in the main thread
        app.run(host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        print("\nExiting...")
    finally:
        GPIO.cleanup()

if __name__ == '__main__':
    main()
