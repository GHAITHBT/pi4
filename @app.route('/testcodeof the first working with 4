import spidev
import time
import json
import RPi.GPIO as GPIO
from flask import Flask, request, jsonify
import socket
import mysql.connector
from mysql.connector import pooling

app = Flask(__name__)

# SPI Configuration
spi = spidev.SpiDev()
spi.open(0, 0)  # SPI bus 0, chip select 0
spi.max_speed_hz = 1000000  # 1 MHz

# MCP23S17 Register definitions
IODIRA = 0x00  # I/O direction register A
IODIRB = 0x01  # I/O direction register B
GPIOA = 0x12   # GPIOA register for reading/writing
GPIOB = 0x13   # GPIOB register for reading
OLATA = 0x14   # Output latch for GPIOA

# MCP23S17 Addresses (for scalability)
mcp23s17_addresses = [0x40, 0x42, 0x44, 0x46]  # Up to 4 expanders

# Chip Select (CS) GPIO Pins
cs_pins = [5, 6, 25, 26]  # CS pins for each MCP23S17 chip

# Database configuration
db_config = {
    'host': '10.110.10.204',
    'user': 'root',
    'password': 'Passw0rd123',
    'database': 'PickByLight'
}

# MySQL Connection Pool
mysql_pool = pooling.MySQLConnectionPool(pool_name="mysql_pool", pool_size=5, **db_config)

# Set up GPIO for CS Pins
GPIO.setmode(GPIO.BCM)
for pin in cs_pins:
    GPIO.setup(pin, GPIO.OUT)
    GPIO.output(pin, GPIO.HIGH)  # Set all CS pins HIGH (inactive)

# Utility function to get the Raspberry Pi's IP address
def get_ip_address():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
    except Exception:
        ip = "127.0.0.1"
    finally:
        s.close()
    return ip

# Get a connection from the MySQL pool
def get_db_connection():
    return mysql_pool.get_connection()

def select_expander(expander):
    """Activate the correct expander's CS pin."""
    for i, pin in enumerate(cs_pins):
        GPIO.output(pin, GPIO.LOW if i == expander else GPIO.HIGH)

# SPI communication with MCP23S17
def write_register(expander, register, value):
    select_expander(expander)  # Select the correct expander
    spi.xfer2([mcp23s17_addresses[expander], register, value])
    GPIO.output(cs_pins[expander], GPIO.HIGH)  # Deselect the expander

def read_register(expander, register):
    select_expander(expander)  # Select the correct expander
    result = spi.xfer2([mcp23s17_addresses[expander] + 1, register, 0x00])
    GPIO.output(cs_pins[expander], GPIO.HIGH)  # Deselect the expander
    return result[2]

# Initialize MCP23S17
def setup_mcp23s17(expander):
    # Set GPIOA as outputs and GPIOB as inputs
    write_register(expander, IODIRA, 0x00)  # GPIOA as outputs
    write_register(expander, IODIRB, 0xFF)  # GPIOB as inputs

# Function to initialize GPIO for one or more expanders
def initialize_gpio(config):
    # Set up each expander
    for expander in range(len(cs_pins)):  # We now have 4 chips
        setup_mcp23s17(expander)

    # Ensure all LEDs are off
    for material, led_config in config['led_pins'].items():
        expander = led_config['expander']
        pin = led_config['pin']
        current_output = read_register(expander, OLATA)
        new_output = current_output & ~(1 << pin)
        write_register(expander, OLATA, new_output)  # Turn off LEDs

# Fetch configuration from the database
def fetch_configuration():
    ip_address = get_ip_address()
    connection = get_db_connection()
    try:
        cursor = connection.cursor(dictionary=True)
        cursor.execute('SELECT * FROM rasp_pi_configurations WHERE ip_address = %s', (ip_address,))
        config = cursor.fetchone()
        if config:
            config['led_pins'] = json.loads(config['led_pins'])
            config['button_pins'] = json.loads(config['button_pins'])
            return config
        return {}
    finally:
        cursor.close()
        connection.close()

# Activate LEDs one by one
@app.route('/activate_led', methods=['POST'])
def activate_led():
    data = request.json
    materials = data.get('materials', [])
    machine_name = data.get('machine_name')

    if not materials or not machine_name:
        return jsonify({'error': 'No materials or machine_name provided'}), 400

    for material in materials:
        if material in led_pins:
            expander = led_pins[material]['expander']
            pin = led_pins[material]['pin']
            # Turn on the LED
            current_output = read_register(expander, OLATA)
            new_output = current_output | (1 << pin)
            write_register(expander, OLATA, new_output)
            print(f"LED for {material} activated. Waiting for confirmation.")

            # Wait for button press
            while True:
                button_expander = button_pins[material]['expander']
                button_pin = button_pins[material]['pin']
                button_state = read_register(button_expander, GPIOB)
                if not (button_state & (1 << button_pin)):  # Button press detected (LOW state)
                    new_output &= ~(1 << pin)  # Turn off the LED
                    write_register(expander, OLATA, new_output)
                    print(f"Confirmation received for {material}. Moving to next material.")
                    break
        else:
            return jsonify({'error': f'Invalid material: {material}'}), 400

    return jsonify({'status': f'All materials processed for machine {machine_name}'}), 200

# Deactivate LED
@app.route('/deactivate_led', methods=['POST'])
def deactivate_led():
    data = request.json
    material = data.get('material')
    if material in led_pins:
        expander = led_pins[material]['expander']
        pin = led_pins[material]['pin']
        current_output = read_register(expander, OLATA)
        new_output = current_output & ~(1 << pin)  # Set specific LED pin low
        write_register(expander, OLATA, new_output)
        return jsonify({'status': 'LED deactivated'}), 200
    return jsonify({'error': 'Invalid material'}), 400

# Main application loop
def main():
    config = fetch_configuration()
    if not config:
        print("No configuration found for this Raspberry Pi.")
        return

    global led_pins, button_pins, status_led_pin
    led_pins = config.get('led_pins', {})
    button_pins = config.get('button_pins', {})
    status_led_pin = config.get('status_led_pin', 0)

    # Initialize GPIO with MCP23S17
    initialize_gpio(config)

    try:
        # Start Flask server
        app.run(host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        print("\nExiting...")
    finally:
        GPIO.cleanup()

if __name__ == '__main__':
    main()
