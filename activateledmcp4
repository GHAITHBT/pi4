@app.route('/activate_led', methods=['POST'])
def activate_led():
    """Activate LEDs and wait for button press confirmation."""
    data = request.json
    materials = data.get('materials', [])
    machine_name = data.get('machine_name')

    if not materials or not machine_name:
        return jsonify({'error': 'No materials or machine_name provided'}), 400

    for material in materials:
        if material in led_pins:
            # Retrieve the LED pin configuration
            expander = led_pins[material]['chip']
            led_pin = led_pins[material]['pin']

            # Turn on the LED
            current_output = read_register(expander, OLATB)
            new_output = current_output | (1 << led_pin)
            write_register(expander, OLATB, new_output)
            print(f"LED for {material} activated on chip {expander}, pin {led_pin}. Waiting for button press.")

            # Retrieve the button pin configuration
            button_expander = button_pins[material]['chip']
            button_pin = button_pins[material]['pin']

            print(f"Monitoring button on chip {button_expander}, pin {button_pin}.")

            # Wait for the button press with proper pin masking and debugging
            while True:
                button_state = read_register(button_expander, GPIOA)
                print(f"Button state: {bin(button_state)} on chip {button_expander}.")

                # Check if the button pin is LOW (pressed)
                if not (button_state & (1 << button_pin)):
                    print(f"Button pressed for {material} (chip {button_expander}, pin {button_pin}).")

                    # Debounce: wait and confirm the button is still pressed
                    time.sleep(0.05)  # 50ms debounce
                    button_state = read_register(button_expander, GPIOA)
                    if not (button_state & (1 << button_pin)):
                        print(f"Confirmed button press for {material}. Turning off LED.")

                        # Turn off the LED
                        new_output &= ~(1 << led_pin)
                        write_register(expander, OLATB, new_output)

                        # Send confirmation
                        print(f"Confirmation sent for {material}. Moving to next material.")
                        break  # Exit the loop and move to the next material
        else:
            return jsonify({'error': f'Invalid material: {material}'}), 400

    return jsonify({'status': f'All materials processed for machine {machine_name}'}), 200
