from flask import Flask, request, jsonify
import RPi.GPIO as GPIO
import socket
import requests
import time
import threading
import pymssql
import json
import subprocess
import socketio  # Add SocketIO client

app = Flask(__name__)

hostname = socket.gethostname()
sio = socketio.Client()  # Create SocketIO client instance

# Database configuration for SQL Server
db_config = {
    'server': '10.110.30.15',   # Replace with your SQL Server IP
    'user': 'GhaithBT',
    'password': 'Passw0rd123',
    'database': 'pickbylight'
}

# Set up the SQL Server database connection pool (pymssql does not natively support connection pooling)
def get_db_connection():
    try:
        conn = pymssql.connect(**db_config)
        return conn
    except pymssql.InterfaceError as err:
        print(f"Error connecting to SQL Server: {err}")
        return None

# Get the IP address of the Raspberry Pi
def get_ip_address():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
    except Exception:
        ip = "127.0.0.1"
    finally:
        s.close()
    return ip

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

# Initialize GPIO based on the configuration
def initialize_gpio(config):
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)

    led_pins = config.get('led_pins', {})
    button_pins = config.get('button_pins', {})
    status_led_pin = config.get('status_led_pin', 0)

    # Setup LED pins
    for pin in led_pins.values():
        GPIO.setup(pin, GPIO.OUT)
        GPIO.output(pin, GPIO.LOW)

    # Setup button pins
    for pin in button_pins.values():
        GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

    # Setup status LED pin
    GPIO.setup(status_led_pin, GPIO.OUT)
    GPIO.output(status_led_pin, GPIO.HIGH)

# Fetch configuration from the SQL Server database
def fetch_configuration():
    ip_address = get_ip_address()
    connection = get_db_connection()
    if not connection:
        return {}

    try:
        cursor = connection.cursor(as_dict=True)
        cursor.execute('SELECT * FROM rasp_pi_configurations WHERE ip_address = %s', (ip_address,))
        config = cursor.fetchone()
        if config:
            # Convert JSON fields to Python objects
            config['led_pins'] = json.loads(config['led_pins'])
            config['button_pins'] = json.loads(config['button_pins'])
            return config
        return {}
    except pymssql.Error as err:
        print(f"Database error: {err}")
        return {}
    finally:
        cursor.close()
        connection.close()

config = fetch_configuration()
machine_name = config.get('machine_name')
# Track the LED status for each material
led_status = {material: False for material in config.get('led_pins', {}).keys()}

# Activate the LEDs for materials one by one, waiting for button press confirmation
@app.route('/activate_led', methods=['POST'])
def activate_led():
    data = request.json
    materials = data.get('materials', [])
    machine_name = data.get('machine_name')  # Fetch machine_name from the request

    if not materials or not machine_name:
        return jsonify({'error': 'No materials or machine_name provided'}), 400

    for material in materials:
        if material in led_pins:
            # Turn on the LED for the current material
            GPIO.output(led_pins[material], GPIO.HIGH)
            led_status[material] = True  # Mark this LED as on
            print(f"LED for {material} activated for machine {machine_name}. Waiting for confirmation.")

            # Wait for the button press confirmation before moving to the next material
            while True:
                if GPIO.input(button_pins[material]) == GPIO.LOW:  # Assuming button press pulls the pin LOW
                    GPIO.output(led_pins[material], GPIO.LOW)  # Turn off the LED after confirmation
                    led_status[material] = False  # Mark this LED as off
                    print(f"Confirmation received for {material}. Moving to next material for machine {machine_name}.")
                    time.sleep(0.5)  # Add small delay to debounce

                    # Send the confirmation back to the server with the machine name
                    try:
                        response = requests.post(f'http://10.110.10.204:5001/confirmation_material',
                                                 json={'material': material, 'hostname': hostname, 'machine_name': machine_name})
                        response.raise_for_status()
                    except requests.RequestException as e:
                        print(f"Error sending confirmation for {material}: {e}")
                    break
        else:
            return jsonify({'error': f'Invalid material: {material}'}), 400

    return jsonify({'status': f'All materials processed for machine {machine_name}'}), 200

# Deactivate the specified LED
@app.route('/deactivate_led', methods=['POST'])
def deactivate_led():
    data = request.json
    material = data.get('material')
    if material in led_pins:
        GPIO.output(led_pins[material], GPIO.LOW)
        led_status[material] = False  # Mark the LED as off
        return jsonify({'status': 'LED deactivated'}), 200
    return jsonify({'error': 'Invalid material'}), 400

# Verify LEDs by blinking each one briefly
def verify_leds():
    print("Verifying LEDs...")
    for material, pin in led_pins.items():
        GPIO.output(pin, GPIO.HIGH)
        time.sleep(1)
        GPIO.output(pin, GPIO.LOW)
        time.sleep(0.2)

# Check network connectivity by pinging the server
def check_network():
    try:
        result = subprocess.run(['ping', '-c', '1', '10.110.30.15'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return result.returncode == 0
    except Exception:
        return False

# Button callback when pressed
def button_callback(channel):
    material = [m for m, p in button_pins.items() if p == channel][0]
    # Only proceed if the LED for this material is currently on
    if led_status.get(material):
        GPIO.output(led_pins[material], GPIO.LOW)
        led_status[material] = False  # Mark this LED as off
        try:
            response = requests.post(f'http://10.110.30.15:5001/confirmation_material',
                                     json={'material': material, 'hostname': hostname, 'machine_name': machine_name})
            response.raise_for_status()
            print(f"Confirmation sent for {material}.")
        except requests.RequestException as e:
            print(f"Error sending confirmation: {e}")

# Blink the status LED a specified number of times
def blink_status_led(times=3):
    for _ in range(times):
        GPIO.output(status_led_pin, GPIO.HIGH)
        time.sleep(0.2)
        GPIO.output(status_led_pin, GPIO.LOW)
        time.sleep(0.2)

# SocketIO event handler for configuration updates
@sio.event
def configuration_update(data):
    print(f"Configuration update received: {data}")

    # Blink status LED three times to signal update
    blink_status_led()

    # Fetch and apply the new configuration
    new_config = fetch_configuration()
    if new_config:
        global led_pins, button_pins, status_led_pin
        led_pins = new_config.get('led_pins', {})
        button_pins = new_config.get('button_pins', {})
        status_led_pin = new_config.get('status_led_pin', 0)

        # Reinitialize the GPIO with the new config
        initialize_gpio(new_config)
        print("Configuration updated successfully.")
    else:
        print("Failed to fetch new configuration.")

# Connect to the Flask server via SocketIO
def connect_socketio():
    try:
        sio.connect('http://10.110.10.204:5001')
        print("Connected to Flask server via SocketIO.")
    except Exception as e:
        print(f"Failed to connect to Flask server: {e}")

# Run Flask app in a separate thread
def run_flask():
    app.run(host='0.0.0.0', port=5000)

# Main function to manage GPIO and configuration
def main():
    config = fetch_configuration()
    if not config:
        print("No configuration found for this Raspberry Pi.")
        return

    global led_pins, button_pins, status_led_pin
    led_pins = config.get('led_pins', {})
    button_pins = config.get('button_pins', {})
    status_led_pin = config.get('status_led_pin', 0)

    initialize_gpio(config)

    try:
        # Start Flask server in a separate thread
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()

        # Connect to the server for configuration updates
        connect_socketio()

        # Verify LEDs are functioning correctly
        verify_leds()

        # Setup button event listeners
        for pin in button_pins.values():
            GPIO.add_event_detect(pin, GPIO.FALLING, callback=button_callback, bouncetime=300)

        # Continuously check network connectivity
        while True:
            if check_network():
                print("Network is reachable.")
            else:
                print("Network is unreachable.")
            time.sleep(30)

    except KeyboardInterrupt:
        GPIO.cleanup()
    finally:
        GPIO.cleanup()

if __name__ == "__main__":
    main()
