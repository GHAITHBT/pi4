def fetch_configuration():
    ip_address = get_ip_address()  # Function to get this Pi's IP
    connection = get_db_connection()
    try:
        cursor = connection.cursor(dictionary=True)
        cursor.execute('SELECT * FROM rasp_pi_configurations WHERE ip_address = %s', (ip_address,))
        
        config = cursor.fetchone()
        
        if config:
            try:
                # Unescape the JSON strings before loading them
                config['led_pins'] = json.loads(config['led_pins'].replace('\\"', '"'))
                config['button_pins'] = json.loads(config['button_pins'].replace('\\"', '"'))
                config['predefined_materials'] = json.loads(config['predefined_materials'].replace('\\"', '"'))
            except json.JSONDecodeError as e:
                print(f"Error decoding JSON: {e}")
                print(f"Invalid JSON data: {config}")
                return {}

            config['chip_select_pins'] = {
                1: 5,
                2: 6,
                3: 25,
                4: 24
            }
            return config
        
        return {}
    except mysql.connector.Error as err:
        print(f"Database error: {err}")
        return {}
    finally:
        cursor.close()
        connection.close()
