from flask import Flask, request, jsonify
import RPi.GPIO as GPIO
import time
import threading

app = Flask(__name__)

# Global state for LED and button processing
current_led_index = -1  # To track which LED is currently activated

# Assuming led_pins and button_pins are dictionaries
led_pins = {}  # {material_name: pin_number}
button_pins = {}  # {material_name: pin_number}

# Keep track of materials in order
material_order = []  # Holds materials in the order they should be activated

# Activate LEDs one by one (but don't change how materials are received)
@app.route('/activate_led', methods=['POST'])
def activate_led():
    global current_led_index
    data = request.json
    material = data.get('material')  # Keeping the same way materials are sent
    
    if material in led_pins:
        # Reset current LED index and set up material order with just this material
        global material_order
        material_order = [material]
        current_led_index = 0
        turn_on_next_led()
        return jsonify({'status': 'Started LED activation for material'}), 200
    return jsonify({'error': 'Invalid material'}), 400

# Turn on the next LED in the sequence
def turn_on_next_led():
    global current_led_index

    if current_led_index >= 0 and current_led_index < len(material_order):
        material = material_order[current_led_index]
        if material in led_pins:
            # Turn on the current LED
            GPIO.output(led_pins[material], GPIO.HIGH)
            print(f"Turned on LED for {material}")
        else:
            print(f"Material {material} not found in LED pins.")
    else:
        print("All LEDs have been activated.")

# Button callback for confirmation
def button_callback(channel):
    global current_led_index
    material = [m for m, p in button_pins.items() if p == channel][0]

    if current_led_index >= 0 and material_order[current_led_index] == material:
        # Turn off the current LED
        GPIO.output(led_pins[material], GPIO.LOW)
        print(f"Turned off LED for {material}")

        # Move to the next LED (if applicable)
        current_led_index += 1
        if current_led_index < len(material_order):
            turn_on_next_led()
        else:
            print("All LEDs have been processed.")
    else:
        print(f"Unexpected button press for {material}. Awaiting {material_order[current_led_index]}.")

# Function to initialize the GPIO setup and event listeners for buttons
def initialize_gpio(config):
    global led_pins, button_pins
    led_pins = config.get('led_pins', {})
    button_pins = config.get('button_pins', {})
    status_led_pin = config.get('status_led_pin', 0)

    # Setup LEDs
    for pin in led_pins.values():
        GPIO.setup(pin, GPIO.OUT)
        GPIO.output(pin, GPIO.LOW)

    # Setup buttons with callbacks
    for pin in button_pins.values():
        GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.add_event_detect(pin, GPIO.FALLING, callback=button_callback, bouncetime=200)

    # Setup status LED pin
    GPIO.setup(status_led_pin, GPIO.OUT)
    GPIO.output(status_led_pin, GPIO.HIGH)

# Main function to manage GPIO and configuration
def main():
    config = fetch_configuration()
    if not config:
        print("No configuration found for this Raspberry Pi.")
        return

    global led_pins, button_pins, status_led_pin
    led_pins = config.get('led_pins', {})
    button_pins = config.get('button_pins', {})
    status_led_pin = config.get('status_led_pin', 0)

    initialize_gpio(config)

    try:
        # Start Flask server in a separate thread
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()

        # Main loop to check network and handle GPIO status LED
        while True:
            if check_network():
                GPIO.output(status_led_pin, GPIO.HIGH)
                time.sleep(1)
            else:
                GPIO.output(status_led_pin, GPIO.LOW)
                time.sleep(0.5)
    except KeyboardInterrupt:
        print("\nExiting...")
    finally:
        GPIO.output(status_led_pin, GPIO.LOW)
        GPIO.cleanup()

if __name__ == '__main__':
    main()
