import spidev
import time
import RPi.GPIO as GPIO

# MCP23S17 Registers
IODIRA = 0x00  # I/O direction register for GPIOA
IODIRB = 0x01  # I/O direction register for GPIOB
GPIOA = 0x12   # GPIOA register to read/write
GPIOB = 0x13   # GPIOB register to read from
OLATA = 0x14   # Output latch register for GPIOA
GPPUB = 0x0C   # GPIOB pull-up register

# GPIO setup for Chip Select
CE0_PIN = 8  # Physical pin number for CE0 (BCM GPIO 8)
CE1_PIN = 7  # Physical pin number for CE1 (BCM GPIO 7)

# Setup GPIO
GPIO.setmode(GPIO.BCM)  # Use BCM GPIO numbering
GPIO.setup(CE0_PIN, GPIO.OUT)
GPIO.setup(CE1_PIN, GPIO.OUT)

# SPI setup
spi = spidev.SpiDev()
spi.open(0, 1)  # SPI bus 0, chip select 1 (CE1)
spi.max_speed_hz = 1000000  # 1 MHz

def write_register(register, value):
    GPIO.output(CE1_PIN, GPIO.LOW)  # Select device
    spi.xfer2([0x40, register, value])  # 0x40 is the address of the MCP23S17 for writing
    GPIO.output(CE1_PIN, GPIO.HIGH)  # Deselect device

def read_register(register):
    GPIO.output(CE1_PIN, GPIO.LOW)  # Select device
    result = spi.xfer2([0x41, register, 0x00])  # 0x41 is the address for reading
    GPIO.output(CE1_PIN, GPIO.HIGH)  # Deselect device
    return result[2]

def setup_mcp23s17():
    # Set GPIOA0, GPIOA1, GPIOA2 as outputs and GPIOB5, GPIOB6, GPIOB7 as inputs
    write_register(IODIRA, 0b00000111)  # Set GPIOA0, A1, A2 as outputs
    write_register(IODIRB, 0b00000111)  # Set GPIOB5, B6, B7 as inputs
    write_register(GPPUB, 0b11100000)    # Enable pull-ups on GPIOB5, B6, B7

def set_gpio_high(pin):
    current_state = read_register(OLATA)
    write_register(OLATA, current_state | (1 << pin))  # Set the specified bit high
    print(f"GPIOA{pin} is HIGH")

def set_gpio_low(pin):
    current_state = read_register(OLATA)
    write_register(OLATA, current_state & ~(1 << pin))  # Clear the specified bit
    print(f"GPIOA{pin} is LOW")

def wait_for_button_press(button_index):
    print(f"Waiting for button press on GPIOB{button_index}...")
    while True:
        gpio_b_state = read_register(GPIOB)
        print(f"Current GPIOB state: {gpio_b_state:#04x}")  # Debug print for GPIOB state
        if not (gpio_b_state & (1 << button_index)):  # Check if button at button_index is low
            print(f"Button pressed on GPIOB{button_index}")
            break
        time.sleep(0.1)

try:
    # Setup MCP23S17
    setup_mcp23s17()

    led_pins = [0, 1, 2]  # GPIOA0, GPIOA1, GPIOA2
    button_pins = [5, 6, 7]  # GPIOB5, GPIOB6, GPIOB7

    # Main loop to control LEDs with buttons
    for i in range(len(led_pins)):
        # Wait for the corresponding button press
        wait_for_button_press(button_pins[i])

        # Turn on the corresponding LED
        set_gpio_high(led_pins[i])

        # Wait for the same button to be pressed again to turn off the LED
        wait_for_button_press(button_pins[i])

        # Turn off the corresponding LED
        set_gpio_low(led_pins[i])

    print("All LEDs have been turned on and off in order.")

finally:
    # Cleanup GPIO and close SPI
    GPIO.output(CE0_PIN, GPIO.HIGH)  # Ensure CE0 is HIGH
    GPIO.output(CE1_PIN, GPIO.HIGH)  # Ensure CE1 is HIGH
    spi.close()
    GPIO.cleanup()  # Reset GPIO pins to their default state
