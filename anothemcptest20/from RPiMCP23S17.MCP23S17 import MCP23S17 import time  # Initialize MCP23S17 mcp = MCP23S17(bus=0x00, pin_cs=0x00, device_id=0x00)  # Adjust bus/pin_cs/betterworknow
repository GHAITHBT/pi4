import spidev
import time

# MCP23S17 Register addresses
IODIRA = 0x00  # I/O direction for Bank A
IODIRB = 0x01  # I/O direction for Bank B
GPPUA = 0x0C   # Pull-up resistors for Bank A
GPIOA = 0x12   # GPIO register for Bank A (buttons)
GPIOB = 0x13   # GPIO register for Bank B (LEDs)

# MCP23S17 SPI commands
MCP23S17_WRITE = 0x40
MCP23S17_READ = 0x41

# Set up SPI
spi = spidev.SpiDev()
spi.open(0, 0)  # Use CE0
spi.max_speed_hz = 1000000  # 1 MHz speed for MCP23S17

# MCP addresses
MCP1_ADDR = 0x20  # First MCP (A0, A1, A2 -> GND)
MCP2_ADDR = 0x21  # Second MCP (A0 -> VDD, A1, A2 -> GND)

# Helper functions to write and read registers
def write_register(mcp_addr, register, value):
    spi.xfer2([MCP23S17_WRITE | (mcp_addr << 1), register, value])

def read_register(mcp_addr, register):
    return spi.xfer2([MCP23S17_READ | (mcp_addr << 1), register, 0x00])[2]

# Initialize GPIO directions and pull-ups
def initialize_mcp(mcp_addr):
    write_register(mcp_addr, IODIRB, 0x7F)  # Set GPIOB7 as output, others as input
    write_register(mcp_addr, IODIRA, 0xFF)  # Set all GPIOA pins as input
    write_register(mcp_addr, GPPUA, 0x01)   # Enable pull-up on GPIOA0 (button)

# Turn on LED (GPIOB7)
def turn_on_led(mcp_addr):
    write_register(mcp_addr, GPIOB, 0x80)  # Set GPIOB7 high to turn on LED

# Turn off LED (GPIOB7)
def turn_off_led(mcp_addr):
    write_register(mcp_addr, GPIOB, 0x00)  # Set GPIOB7 low to turn off LED

# Check if button is pressed (GPIOA0)
def is_button_pressed(mcp_addr):
    button_state = read_register(mcp_addr, GPIOA)
    return (button_state & 0x01) == 0  # Active low: 0 means pressed

# Debounce logic to ensure stable button reading
def debounce_button(mcp_addr, debounce_time=0.1):
    if is_button_pressed(mcp_addr):
        time.sleep(debounce_time)  # Wait for debounce time
        if is_button_pressed(mcp_addr):  # Check again to confirm
            return True
    return False

# Main logic
def main():
    # Initialize MCPs
    initialize_mcp(MCP1_ADDR)
    initialize_mcp(MCP2_ADDR)

    # Turn on both LEDs initially
    turn_on_led(MCP1_ADDR)
    turn_on_led(MCP2_ADDR)

    print("LEDs are ON. Waiting for button presses to turn them off.")

    while True:
        # Check if the button for MCP1 is pressed and debounce it
        if debounce_button(MCP1_ADDR):
            print("MCP1 button pressed, turning off LED.")
            turn_off_led(MCP1_ADDR)

        # Check if the button for MCP2 is pressed and debounce it
        if debounce_button(MCP2_ADDR):
            print("MCP2 button pressed, turning off LED.")
            turn_off_led(MCP2_ADDR)

        time.sleep(0.1)  # Small delay for checking button state

try:
    main()
except KeyboardInterrupt:
    print("Exiting...")
finally:
    spi.close()
